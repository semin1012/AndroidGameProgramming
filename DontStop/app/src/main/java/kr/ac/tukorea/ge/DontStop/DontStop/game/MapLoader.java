package kr.ac.tukorea.ge.DontStop.DontStop.game;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Canvas;

import java.util.Random;

import kr.ac.tukorea.ge.DontStop.framework.interfaces.IGameObject;
import kr.ac.tukorea.ge.DontStop.framework.scene.BaseScene;
import kr.ac.tukorea.ge.DontStop.framework.view.Metrics;

public class MapLoader implements IGameObject {
    private static final String TAG = MapLoader.class.getSimpleName();
    private Random random = new Random();
    private float x;
    private int index;

    public MapLoader(Context context) {
        //loadStage(context, 1);
    }

    private static final int STAGE_WIDTH = 200;
    private static final int STAGE_HEIGHT = 9;
    private static final int[][] STAGES = {
            {
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 97, 98, 99, 0, 0, 0, 0, 0, 100, 101, 0, 97, 98, 99, 0, 0, 0, 0, 0, 100, 101, 0, 0, 0, 0, 0, 102, 103, 104, 0, 0, 0, 0, 97, 98, 99, 0, 0, 0, 0, 0, 102, 103, 104, 0, 0, 0, 0, 0, 0, 97, 98, 99, 0, 0, 100, 101, 0, 0, 100, 101, 0, 0, 0, 97, 98, 99, 0, 102, 103, 104, 0, 0, 0, 0, 0, 0, 100, 101, 102, 103, 104, 0, 0, 0, 0, 0, 97, 98, 99, 0, 102, 103, 104, 0, 0, 0, 0, 0, 100, 101, 0, 100, 101, 0, 0, 0, 0, 0, 97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 103, 104, 0, 0, 0, 0, 0, 97, 98, 99, 0, 0, 0, 0, 100, 101, 0, 0, 0, 0, 0, 96, 96, 0, 0, 0, 102, 103, 104, 0, 0, 100, 101, 0, 0, 0, 0, 0, 97, 98, 99, 0, 0, 0, 0, 0, 0, 102, 103, 104, 0, 97, 98, 99, 0, 0, 0, 0, 0, 0, 97, 98, 99, 100, 101, 0, 102, 103, 104, 0,
                    0, 0, 0, 0, 0, 0, 0, 116, 117, 118, 0, 0, 0, 0, 0, 119, 120, 0, 116, 117, 118, 0, 0, 0, 0, 0, 119, 120, 0, 96, 96, 96, 0, 121, 122, 123, 0, 96, 96, 0, 116, 117, 118, 96, 96, 96, 96, 96, 121, 122, 123, 0, 96, 96, 96, 96, 0, 116, 117, 118, 96, 96, 119, 120, 96, 96, 119, 120, 96, 96, 96, 116, 117, 118, 96, 121, 122, 123, 0, 96, 96, 96, 96, 0, 119, 120, 121, 122, 123, 0, 0, 96, 0, 0, 116, 117, 118, 0, 121, 122, 123, 0, 0, 0, 0, 0, 119, 120, 0, 119, 120, 0, 96, 96, 96, 0, 116, 117, 118, 96, 96, 96, 0, 0, 0, 96, 96, 96, 0, 121, 122, 123, 0, 96, 96, 96, 0, 116, 117, 118, 0, 96, 96, 0, 119, 120, 0, 0, 0, 96, 96, 96, 96, 96, 96, 0, 121, 122, 123, 96, 96, 119, 120, 0, 96, 96, 96, 0, 116, 117, 118, 0, 96, 96, 96, 96, 0, 121, 122, 123, 0, 116, 117, 118, 0, 96, 96, 96, 96, 0, 116, 117, 118, 119, 120, 96, 121, 122, 123, 0,
                    0, 96, 96, 96, 96, 96, 96, 135, 136, 137, 0, 0, 0, 0, 96, 138, 139, 96, 135, 136, 137, 0, 96, 96, 96, 0, 138, 139, 0, 96, 96, 96, 0, 140, 141, 142, 0, 96, 96, 0, 135, 136, 137, 96, 96, 96, 96, 96, 140, 141, 142, 0, 96, 96, 96, 96, 0, 135, 136, 137, 96, 96, 138, 139, 96, 96, 138, 139, 96, 96, 96, 135, 136, 137, 96, 140, 141, 142, 0, 96, 96, 96, 96, 0, 138, 139, 140, 141, 142, 0, 96, 96, 96, 0, 135, 136, 137, 0, 140, 141, 142, 0, 96, 96, 0, 0, 138, 139, 0, 138, 139, 0, 96, 96, 96, 0, 135, 136, 137, 96, 96, 96, 0, 0, 0, 96, 96, 96, 0, 140, 141, 142, 0, 96, 96, 96, 0, 135, 136, 137, 0, 96, 96, 0, 138, 139, 0, 0, 0, 96, 96, 96, 96, 96, 96, 0, 140, 141, 142, 96, 96, 138, 139, 0, 96, 96, 96, 0, 135, 136, 137, 0, 96, 0, 0, 96, 0, 140, 141, 142, 0, 135, 136, 137, 96, 96, 0, 0, 96, 96, 135, 136, 137, 138, 139, 96, 140, 141, 142, 0,
                    0, 96, 96, 96, 96, 96, 96, 154, 155, 156, 0, 0, 0, 0, 96, 157, 158, 96, 154, 155, 156, 96, 96, 96, 96, 96, 157, 158, 96, 96, 96, 96, 96, 159, 160, 161, 0, 96, 96, 0, 154, 155, 156, 96, 96, 96, 96, 96, 159, 160, 161, 96, 96, 96, 96, 96, 96, 154, 155, 156, 96, 96, 157, 158, 96, 96, 157, 158, 96, 96, 96, 154, 155, 156, 96, 159, 160, 161, 96, 96, 96, 96, 96, 96, 157, 158, 159, 160, 161, 96, 96, 0, 96, 96, 154, 155, 156, 0, 159, 160, 161, 96, 0, 0, 96, 0, 157, 158, 0, 157, 158, 0, 96, 96, 96, 0, 154, 155, 156, 96, 0, 96, 96, 96, 96, 96, 0, 96, 96, 159, 160, 161, 0, 96, 96, 96, 0, 154, 155, 156, 96, 96, 96, 96, 157, 158, 96, 96, 96, 96, 0, 0, 0, 0, 96, 96, 159, 160, 161, 96, 96, 157, 158, 0, 96, 96, 96, 0, 154, 155, 156, 0, 96, 96, 96, 96, 0, 159, 160, 161, 0, 154, 155, 156, 96, 96, 96, 96, 96, 96, 154, 155, 156, 157, 158, 96, 159, 160, 161, 0,
                    0, 0, 0, 0, 0, 0, 0, 173, 174, 175, 0, 0, 0, 0, 0, 176, 177, 0, 173, 174, 175, 0, 0, 0, 0, 0, 176, 177, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 0, 0, 173, 174, 175, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 173, 174, 175, 0, 0, 176, 177, 0, 0, 176, 177, 0, 0, 0, 173, 174, 175, 0, 178, 179, 180, 0, 0, 0, 0, 0, 0, 176, 177, 178, 179, 180, 0, 0, 0, 0, 0, 173, 174, 175, 0, 178, 179, 180, 96, 0, 0, 96, 0, 176, 177, 0, 176, 177, 0, 0, 0, 0, 0, 173, 174, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 0, 0, 0, 173, 174, 175, 0, 0, 0, 0, 176, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 179, 180, 0, 0, 176, 177, 0, 0, 0, 0, 0, 173, 174, 175, 0, 0, 0, 0, 0, 0, 178, 179, 180, 0, 173, 174, 175, 0, 0, 0, 0, 0, 0, 173, 174, 175, 176, 177, 0, 178, 179, 180, 0,
                    91, 92, 91, 92, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 91, 92, 91, 92, 0, 0, 0, 0, 91, 92, 91, 92, 0, 0, 0, 91, 92, 93, 94, 95, 0, 0, 0, 93, 94, 95, 0, 0, 0, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 91, 92, 91, 92, 0, 0, 91, 92, 0, 0, 91, 92, 0, 0, 91, 92, 91, 92, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 91, 92, 93, 94, 95, 91, 92, 0, 0, 0, 0, 91, 92, 91, 92, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 0, 0, 0, 93, 94, 95, 0, 0, 0, 93, 94, 95, 91, 92, 0, 0, 0, 91, 92, 91, 92, 0, 0, 0, 91, 92, 91, 92, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 93, 94, 95, 91, 92, 91, 92, 0, 0, 0, 91, 92, 93, 94, 95, 0, 0, 0, 0, 91, 92, 93, 94, 95, 91, 92, 93, 94, 95, 0, 0, 0, 0, 91, 92, 91, 92, 91, 92, 91, 92, 91, 92,
                    91, 92, 91, 92, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 91, 92, 91, 92, 0, 0, 0, 0, 91, 92, 91, 92, 0, 0, 0, 91, 92, 93, 94, 95, 0, 0, 0, 93, 94, 95, 0, 0, 0, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 91, 92, 91, 92, 0, 0, 91, 92, 0, 0, 91, 92, 0, 0, 91, 92, 91, 92, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 93, 94, 95, 0, 0, 0, 0, 91, 92, 93, 94, 95, 91, 92, 0, 0, 0, 0, 91, 92, 91, 92, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 0, 0, 0, 93, 94, 95, 0, 0, 0, 93, 94, 95, 91, 92, 0, 0, 0, 91, 92, 91, 92, 0, 0, 0, 91, 92, 91, 92, 93, 94, 95, 0, 0, 0, 0, 93, 94, 95, 93, 94, 95, 91, 92, 91, 92, 0, 0, 0, 91, 92, 93, 94, 95, 0, 0, 0, 0, 91, 92, 93, 94, 95, 91, 92, 93, 94, 95, 0, 0, 0, 0, 91, 92, 91, 92, 91, 92, 91, 92, 91, 92

            }
    };

    @Override
    public void update() {
        x -= MapObject.SPEED * BaseScene.frameTime;
        float left = x + index;
        while (left < Metrics.game_width) {
            createColumn(left);
            index++;
            left += 1.0f;
        }
    }

    private void createColumn(float left) {
        for (int row = 0; row < STAGE_HEIGHT; row++) {
            int tile = getAt(index, row);
            createObject(tile, left, row);
        }
    }

    private void createObject(int tile, float left, int top) {
        MainScene scene = (MainScene) BaseScene.getTopScene();
        if (91 == tile || 93 == tile ) {
            Platform.Type ptype =
                    tile == 91 ? Platform.Type.T_SHORT:
                    Platform.Type.T_LONG;
            Platform platform = Platform.get(ptype, left, top);
            scene.add(MainScene.Layer.platform, platform);
            return;
        }

        else if ( tile == 96 ) {
            Coin coin = Coin.get(left, top);
            scene.add(MainScene.Layer.coin, coin);
            return;
        }

        else if (tile == 97 ) {
            Obstacle obstacle = Obstacle.get(left, top);
            scene.add(MainScene.Layer.coin, obstacle);
            return;
        }
//        if (tile == 61 || tile == 71 || tile == 73) {
//            Platform.Type ptype =
//                    tile == 61 ? Platform.Type.T_10x2 :
//                            tile == 71 ? Platform.Type.T_2x2 :
//                                    Platform.Type.T_3x1;
//            Platform platform = Platform.get(ptype, left, top);
//            scene.add(MainScene.Layer.platform, platform);
//            return;
//        }
    }

    private int getAt(int col, int row) {
        int idx = row * STAGE_WIDTH + col;
        if (idx >= STAGES[0].length) return 0;
        return STAGES[0][idx];
    }

    @Override
    public void draw(Canvas canvas) {}
}
